
package screen;
import dao.EmpleadoDAO;
import dao.SolicitudDAO;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.EmailSender;
import model.Empleado;
import model.Solicitud;
import model.SolicitudAdminView;
import model.EmailTemplateService;

/**
 *
 * @author Erick
 */
public class GestionSolicitudesAdminForm extends javax.swing.JFrame {
    private final SolicitudDAO solicitudDAO;
    private final EmpleadoDAO empleadoDAO;
    // Esta lista es clave: mantiene una referencia a los objetos completos que se muestran en la tabla.
    private List<SolicitudAdminView> solicitudesMostradas; 
    /**
     * Creates new form SolicitudesForm
     */
    public GestionSolicitudesAdminForm() {
        initComponents();
        this.solicitudDAO = new SolicitudDAO();
        this.empleadoDAO = new EmpleadoDAO();
        this.solicitudesMostradas = new ArrayList<>();
        this.setLocationRelativeTo(null); // Centrar la ventana
        cargarSolicitudesPendientes();
    }
    
      /**
     * Carga las solicitudes con estado "Pendiente", las combina con los datos del empleado
     * y las muestra en la tabla.
     */
    private void cargarSolicitudesPendientes() {
        // Asegúrate de que tu JTable en el diseñador se llame "tablaSolicitudes"
        DefaultTableModel modelo = (DefaultTableModel) tablaSolicitudes.getModel();
        modelo.setRowCount(0); // Limpiar la tabla antes de cargar nuevos datos
        solicitudesMostradas.clear(); // Limpiar la lista de datos interna

        try {
            // 1. Obtener solo las solicitudes pendientes del DAO
            List<Solicitud> solicitudesPendientes = solicitudDAO.obtenerSolicitudesPorEstado("Pendiente");

            // 2. Por cada solicitud, buscar los datos del empleado y combinarlos
            for (Solicitud sol : solicitudesPendientes) {
                Empleado emp = empleadoDAO.buscarPorUsuario(sol.getUsuario());
                
                if (emp != null) {
                    // 3. Crear un objeto "vista" con los datos combinados
                    SolicitudAdminView vista = new SolicitudAdminView();
                    vista.setUsuario(emp.getUsuario());
                    vista.setNombreCompleto(emp.getNombre());
                    vista.setArea(emp.getArea());
                    vista.setCorreo(emp.getCorreo());
                    vista.setMotivo(sol.getJustificacion());
                    vista.setEstado(sol.getEstado());
                    
                    // 4. Añadir el objeto a la lista interna y la fila a la tabla visual
                    solicitudesMostradas.add(vista);
                    modelo.addRow(new Object[]{
                        vista.getUsuario(),
                        vista.getNombreCompleto(),
                        vista.getArea(),
                        vista.getMotivo(),
                        vista.getEstado()
                    });
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar las solicitudes: " + e.getMessage(), "Error de Lectura", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // Para depuración en la consola
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaSolicitudes = new javax.swing.JTable();
        btnAceptar = new javax.swing.JButton();
        btnRechazar = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaSolicitudes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Usuario", "Nombre", "Area", "Motivio de Inactivación", "Estado"
            }
        ));
        jScrollPane1.setViewportView(tablaSolicitudes);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 210, 840, 270));

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAceptar, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 510, 220, 55));

        btnRechazar.setText("Rechazar");
        btnRechazar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRechazarActionPerformed(evt);
            }
        });
        getContentPane().add(btnRechazar, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 510, 230, 55));

        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        getContentPane().add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 560, 110, 40));

        jLabel1.setFont(new java.awt.Font("Lucida Sans", 0, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/PNG/Frame 2256.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 1050, 540));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/PNG/FontPrin.png"))); // NOI18N
        jLabel3.setText("jLabel3");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
       procesarSolicitud("Aceptada", "Inactivo");
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnRechazarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRechazarActionPerformed
        procesarSolicitud("Rechazada", null);
    }//GEN-LAST:event_btnRechazarActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        MantenimientoForm MantenimientoForm = new MantenimientoForm();
        MantenimientoForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    /**
     * Método central para procesar una solicitud (aceptar o rechazar).
     * @param nuevoEstadoSolicitud "Aceptada" o "Rechazada".
     * @param nuevoEstadoEmpleado "Inactivo" si se acepta, o null si se rechaza.
     */
    // Reemplaza este método completo en tu GestionSolicitudesAdminForm.java

private void procesarSolicitud(String nuevoEstadoSolicitud, String nuevoEstadoEmpleado) {
    int filaSeleccionada = tablaSolicitudes.getSelectedRow();
    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una solicitud de la tabla.", "Selección Requerida", JOptionPane.WARNING_MESSAGE);
        return;
    }

    SolicitudAdminView solicitudSeleccionada = solicitudesMostradas.get(filaSeleccionada);
    String usuario = solicitudSeleccionada.getUsuario();
    String correo = solicitudSeleccionada.getCorreo();

    try {
        // 1. Actualiza el estado de la solicitud en solicitudes.txt
        solicitudDAO.actualizarEstadoSolicitud(usuario, solicitudSeleccionada.getMotivo(), nuevoEstadoSolicitud);

        // 2. Si se acepta, actualiza el estado del empleado en empleados.txt
        if (nuevoEstadoEmpleado != null) {
            empleadoDAO.actualizarEstado(usuario, nuevoEstadoEmpleado);
        }

        // --- AQUÍ ESTÁ LA CONEXIÓN ---
        // 3. Se crea una instancia del servicio de plantillas.
        EmailTemplateService templateService = new EmailTemplateService();
        String asunto = "Respuesta a tu Solicitud de Ausencia";

        // 4. Se genera el cuerpo del correo usando tu nueva plantilla HTML.
        String mensajeHtml = templateService.crearHtmlRespuesta(
                solicitudSeleccionada.getNombreCompleto(),
                solicitudSeleccionada.getMotivo(),
                nuevoEstadoSolicitud
        );

        // 5. Se envía el correo con el contenido HTML.
        // Asegúrate de que estás usando la clase que envía correos reales.
        EmailSender.enviarCorreoHtml(correo, asunto, mensajeHtml);
        
        // 6. Recarga la tabla para que la solicitud procesada desaparezca.
        cargarSolicitudesPendientes();

    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error al procesar la solicitud: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionSolicitudesAdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionSolicitudesAdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionSolicitudesAdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionSolicitudesAdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionSolicitudesAdminForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnRechazar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaSolicitudes;
    // End of variables declaration//GEN-END:variables
}
